@model List<Gtfsstops>
@{
    ViewData["Title"] = "Iskanje";
    DateTime currentDate = DateTime.Now;
}
<div class="searchContainer">
    <div class="btn-group searchBar center-block">
        <input id="quickStopSelect" class="form-control dropdown-toggle searchFilterInput" onkeyup="filterMenu(this, 'quickStops')" data-toggle="dropdown" placeholder="Išči po postajah" aria-describedby="quickStops" />
        <ul id="quickStops" class="dropdown-menu pre-scrollable btn-block" aria-labelledby="quickStops">
            @foreach (var item in Model)
            {
                <li name="@item.StopName">
                    <a class="dropdown-item"
                       href="@Url.Action("Index", "Stops", new
                        {
                            stopName = item.StopName,
                            directionId = item.StopDirectionId,
                            date = currentDate.ToString("yyyy-MM-ddTHH\\:mm")
                       })"
                       onclick="chosenItemToInput('@item.StopName', 'quickStopSelect')">
                        @if (item.StopDirectionId == 0)
                        {
                            <img class="searchBarArrowImage" src="~/images/awayFromCity.svg" />
                        }
                        else
                        {
                            <img class="searchBarArrowImage" src="~/images/toCity.svg" />
                        }
                        @item.StopName.Trim()
                    </a>
                </li>
            }
        </ul>
    </div>
    <div id="accordion" class="input-group-addon tripPlannerAccordion hidden">
        <div class="tripPlannerAccordionHeader">
            <img class="tripPlannerImage" src="~/images/tripPlanner.svg" alt="TripPlanner" />
        </div>
        <div class="tripPlannerAccordionMenu">
            <form id="tripPlannerForm" asp-controller="Stops" asp-action="TripPlanner" method="get">
                <div class="stopsDropdownContainer">
                    <input id="stopFrom" name="stopFrom" onkeyup="filterMenu(this, 'stopsFromList')" 
                           class="form-control plannerInput dropdown-toggle" data-toggle="dropdown" aria-describedby="stopsFromList" 
                           placeholder="Izberi začetno postajo..." required autocomplete="off"/>
                    <ul id="stopsFromList" class="dropdown-menu pre-scrollable btn-block stopsDropdownMenu" aria-labelledby="stopFrom">
                        @foreach (var item in Model.Select(x => x.StopName.Trim()).Distinct())
                        {
                            <li name="@item" class="dropdown-item listItemHoverEffect">
                                <div class="dropdownMenuDivItem" onclick="chosenItemToInput('@item', 'stopFrom')">@item</div>
                            </li>
                        }
                    </ul>
                </div>
                <div class="stopsDropdownContainer">
                    <input id="stopTo" name="stopTo" onkeyup="filterMenu(this, 'stopsToList')" class="form-control dropdown-toggle plannerInput" 
                           data-toggle="dropdown" aria-describedby="stopsToList" placeholder="Izberi končno postajo..." required autocomplete="off"/>
                    <ul id="stopsToList" class="dropdown-menu pre-scrollable btn-block stopsDropdownMenu" aria-labelledby="stopTo">
                        @foreach (var item in Model.Select(x => x.StopName.Trim()).Distinct())
                        {
                            <li name="@item" class="listItemHoverEffect">
                                <div class="dropdownMenuDivItem" onclick="chosenItemToInput('@item', 'stopTo')">@item</div>
                            </li>
                        }
                    </ul>
                </div>
                <div class="datepickerContainer">
                    <div type="text"
                         id="datepicker" />
                    <input type="hidden" id="dateISOFormat" name="date" />
                </div>
                <div>
                    <div class="dateTimeSearchParamsContainer">
                        <input id="timepicker"
                               class="form-control" required autocomplete="off">
                        <div class="btn redButton resetDateTimeButton pull-left" onclick="resetDateAndTimeToCurrentWithoutNavigation()">PONASTAVI</div>
                    </div>
                </div>
                <div>
                    <button class="btn redButton" type="submit" onclick="mergeDateTime()">IŠČI</button>
                </div>
            </form>
        </div>
    </div>
</div>

@if (User.Identity.IsAuthenticated)
{
    @await Component.InvokeAsync("FavouriteStops")
}