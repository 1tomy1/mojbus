@model TripPlannerModel
@{
    ViewData["Title"] = "Načrtovalec";
}

@if (Model.StartStop == null || Model.EndStop == null)
{
    <h2>Avtobus nima direktne povezave med izbranima postajama.</h2>
}
else
{
    <div class="stopHeaderContainer">
        <div id="map"></div>
        <div class="stopNameHeader">
            <div class="tripPlannerStopName">@Model.StartStop.StopName.Trim()</div>
            <div class="tripPlannerStopName">-</div>
            <div class="tripPlannerStopName">@Model.EndStop.StopName.Trim()</div>
            <div class="tripPlannerDate">
                <input type="text"
                       class="form-control"
                       id="datepicker"
                       onchange="navigateWithDate('@Url.Action("TripPlanner","Stops", new { stopFrom=Model.StartStop.StopName, stopTo=Model.EndStop.StopName})')"
                       data-date="@Model.RequestedDate.Date">
                <input id="timepicker"
                       class="form-control"
                       data-date="@Model.RequestedDate"
                       onchange="navigateWithDate('@Url.Action("TripPlanner","Stops", new { stopFrom=Model.StartStop.StopName, stopTo=Model.EndStop.StopName})')">
                <a class="btn redButton resetDateTimeButton" href="#" onclick="resetDateAndTimeToCurrent(this,'@Url.Action("TripPlanner","Stops", new { stopFrom=Model.StartStop.StopName, stopTo=Model.EndStop.StopName})')">PONASTAVI</a>
            </div>
        </div>
    </div>

    <div>
        @foreach (var item in Model.Lines)
        {
            @if (item != null)
            {
                <div class="flex-container flexContainerNoMargin">
                    <a class="btn btn-default btn-block departureDataContainer" href="@Url.Action("Timetable", "Stops", new { stopName = Model.StartStop.StopName, routeShortName = item.TripShortName, directionId = item.Trips.First().TripDirectionID, date = Model.RequestedDate.Date })">
                        <div class="lineNumberContainer pull-left text-center" style="background-color: @item.HTMLColor;">
                            <span class="tripShortName">@item.RouteShortName</span>
                        </div>
                        <div class="departureTimeTripPlanner">
                            @{
                                IEnumerable<TransitTime> departureTimes = item.Trips.SelectMany(x => x.Times).OrderBy(x=>x.DepartureTime).Where(x => (Model.RequestedDate.Hour <= Convert.ToInt32(x.DepartureTime.Substring(0, 2)) && Model.RequestedDate.Minute <= Convert.ToInt32(x.DepartureTime.Substring(3, 2))) || (Model.RequestedDate.Hour < Convert.ToInt32(x.DepartureTime.Substring(0, 2)))).Take(5);

                                if (departureTimes.Count() == 0)
                                {
                                    <span>Avtobus od izbrane ure naprej ne vozi več!</span>
                                }
                                else
                                {
                                    @foreach (var trip in departureTimes)
                                    {
                                        <div class="departureTimeData">
                                            <span>@trip.DepartureTime</span>
                                            <br />
                                            <span>@trip.TravelTimeMinutes min</span>
                                        </div>
                                    }
                                }
                            }
                        </div>
                    </a>
                </div>
            }
        }
    </div>

    <script>
        endLat = @Model.EndStop.StopLat;
        endLng = @Model.EndStop.StopLon;        
    </script>


    @section Scripts {
        @await Html.PartialAsync("_GoogleMapsScripts", new StopLocationModel() { StopLat = Model.StartStop.StopLat, StopLon = Model.StartStop.StopLon })
    }
}